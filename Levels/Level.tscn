[gd_scene load_steps=14 format=2]

[ext_resource path="res://Actors/Player/Player.tscn" type="PackedScene" id=1]
[ext_resource path="res://Objects/Surface/Surface.tscn" type="PackedScene" id=2]
[ext_resource path="res://Levels/Level.gd" type="Script" id=3]
[ext_resource path="res://Levels/BeatTarget.gd" type="Script" id=4]
[ext_resource path="res://Levels/Audio/sfx_08a.ogg" type="AudioStream" id=5]

[sub_resource type="RectangleShape2D" id=6]
extents = Vector2( 64, 64 )

[sub_resource type="Shader" id=1]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 base_color : hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 dmg_base_color : hint_color = vec4(1.0, 0.5, 0.0, 1.0);
uniform vec4 crit_base_color : hint_color = vec4(1.0, 0.0, 0.0, 1.0);
uniform float color_shift : hint_range(0.0, 1.0) = 1.0;

uniform float flare : hint_range(0.0, 1.0) = 0.0;

uniform float immortal_thickness : hint_range(0.0, 0.5) = 0.1;
uniform bool immortal = false;

float fnormalize(float from, float to, float v){
	float dist = to - from;
	if (dist == 0.0)
		return 0.0;
	return v / dist;
}

bool uvimmortal(vec2 uv){
	if (immortal){
		float uv_max = 1.0 - immortal_thickness;
		if (uv.x <= immortal_thickness || uv.x >= uv_max || uv.y <= immortal_thickness || uv.y >= uv_max)
			return true;
	}
	return false;
}

float crackle(float time, vec2 uv){
	float e = 1.0 - (time - floor(time));
	bool valA = int(sin(time * uv.x) * 33.0) % 3 > 0;
	bool valB = int(cos(time * mod(uv.y + e, 1.0)) * 66.0) % 3 > 0;
	return (valA && valB) ? 1.0 : 0.0;
}

vec4 get_base_color(float time, vec2 uv){
	vec4 c = base_color;
	if (!immortal){
		if (color_shift <= 0.7 && color_shift > 0.3){
			vec4 tcolor = mix(base_color, dmg_base_color, 0.5);
			c = mix(base_color, tcolor, 1.0 - fnormalize(0.3, 0.7, color_shift));
		} else if (color_shift <= 0.3) {
			vec4 tcolor = mix(base_color, crit_base_color, 0.5);
			c = mix(base_color, tcolor, 1.0 - fnormalize(0.0, 0.3, color_shift));
			c.a = crackle(time, uv);
		}
	}
	return c;
}

void fragment() {
	vec4 color = get_base_color(TIME * 0.5, UV);
	if (uvimmortal(UV)){
		color = mix(color, vec4(0.0, 0.0, 0.0, 1.0), 0.25);
		color.a = crackle(TIME * 0.1, UV);
	} else if (flare > 0.0){
		color = vec4(mix(color.rgb, vec3(1,1,1), flare), color.a);
	}
	COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=2]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/base_color = Color( 0.44, 0.5, 0.56, 1 )
shader_param/dmg_base_color = Color( 1, 0.5, 0, 1 )
shader_param/crit_base_color = Color( 1, 0, 0, 1 )
shader_param/color_shift = 1.0
shader_param/flare = 0.0
shader_param/immortal_thickness = 0.1
shader_param/immortal = false

[sub_resource type="Shader" id=3]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 base_color : hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 dmg_base_color : hint_color = vec4(1.0, 0.5, 0.0, 1.0);
uniform vec4 crit_base_color : hint_color = vec4(1.0, 0.0, 0.0, 1.0);
uniform float color_shift : hint_range(0.0, 1.0) = 1.0;

uniform float flare : hint_range(0.0, 1.0) = 0.0;

uniform float immortal_thickness : hint_range(0.0, 0.5) = 0.1;
uniform bool immortal = false;

float fnormalize(float from, float to, float v){
	float dist = to - from;
	if (dist == 0.0)
		return 0.0;
	return v / dist;
}

bool uvimmortal(vec2 uv){
	if (immortal){
		float uv_max = 1.0 - immortal_thickness;
		if (uv.x <= immortal_thickness || uv.x >= uv_max || uv.y <= immortal_thickness || uv.y >= uv_max)
			return true;
	}
	return false;
}

float crackle(float time, vec2 uv){
	float e = 1.0 - (time - floor(time));
	bool valA = int(sin(time * uv.x) * 33.0) % 3 > 0;
	bool valB = int(cos(time * mod(uv.y + e, 1.0)) * 66.0) % 3 > 0;
	return (valA && valB) ? 1.0 : 0.0;
}

vec4 get_base_color(float time, vec2 uv){
	vec4 c = base_color;
	if (!immortal){
		if (color_shift <= 0.7 && color_shift > 0.3){
			vec4 tcolor = mix(base_color, dmg_base_color, 0.5);
			c = mix(base_color, tcolor, 1.0 - fnormalize(0.3, 0.7, color_shift));
		} else if (color_shift <= 0.3) {
			vec4 tcolor = mix(base_color, crit_base_color, 0.5);
			c = mix(base_color, tcolor, 1.0 - fnormalize(0.0, 0.3, color_shift));
			c.a = crackle(time, uv);
		}
	}
	return c;
}

void fragment() {
	vec4 color = get_base_color(TIME * 0.5, UV);
	if (uvimmortal(UV)){
		color = mix(color, vec4(0.0, 0.0, 0.0, 1.0), 0.25);
		color.a = crackle(TIME * 0.1, UV);
	} else if (flare > 0.0){
		color = vec4(mix(color.rgb, vec3(1,1,1), flare), color.a);
	}
	COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 3 )
shader_param/base_color = Color( 0.44, 0.5, 0.56, 1 )
shader_param/dmg_base_color = Color( 1, 0.5, 0, 1 )
shader_param/crit_base_color = Color( 1, 0, 0, 1 )
shader_param/color_shift = 1.0
shader_param/flare = 0.0
shader_param/immortal_thickness = 0.1
shader_param/immortal = false

[sub_resource type="Environment" id=5]
background_mode = 4
glow_enabled = true
glow_strength = 0.8
glow_blend_mode = 0
glow_bicubic_upscale = true

[sub_resource type="Shader" id=7]
code = "/*
	動的電子背景シェーダー by あるる（きのもと 結衣） @arlez80
	Procedural Electric Background Shader by Yui Kinomoto @arlez80

	MIT License
*/
// Obtained from: https://godotshaders.com/shader/procedural-electric-background-shader/
shader_type canvas_item;

uniform vec4 background_color : hint_color = vec4( 0.0, 0.0, 0.0, 1.0 );
uniform vec4 line_color : hint_color = vec4( 0.0, 1.0, 1.0, 1.0 );
uniform float line_freq = 9.56;
uniform float height = 0.6;
uniform float speed = 0.8;
uniform vec2 scale = vec2( 2.0, 16.0 );

void fragment( )
{
	vec2 uv = UV * scale;
	float shift = cos( floor( uv.y ) );
	uv.x += shift;

	float freq = clamp( cos( uv.x * line_freq ) * 3.0, 0.0, 1.0 ) * height;
	float line = 1.0 - clamp( abs( freq - mod( uv.y, 1.0 ) ) * 11.0, 0.0, 1.0 );

	COLOR = mix( background_color, line_color, line * mod( uv.x - TIME * speed * abs( shift ), 1.0 ) /*  * mod( TIME + shift, 1.0 ) */ );
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/background_color = Color( 0, 0, 0, 1 )
shader_param/line_color = Color( 0.733333, 0.764706, 0.658824, 1 )
shader_param/line_freq = 9.56
shader_param/height = 0.2
shader_param/speed = 0.8
shader_param/scale = Vector2( 8, 32 )

[node name="Level" type="Node2D"]
script = ExtResource( 3 )

[node name="BeatTarget" type="Node2D" parent="."]
script = ExtResource( 4 )

[node name="Area2D" type="Area2D" parent="BeatTarget"]
collision_mask = 8

[node name="CollisionShape2D" type="CollisionShape2D" parent="BeatTarget/Area2D"]
shape = SubResource( 6 )

[node name="SFX" type="AudioStreamPlayer" parent="BeatTarget"]
stream = ExtResource( 5 )
bus = "SFX"

[node name="StaticGeometry" type="Node2D" parent="."]

[node name="Surface_Left" parent="StaticGeometry" instance=ExtResource( 2 )]
material = SubResource( 2 )
position = Vector2( -8, 540 )
size = Vector2( 16, 1080 )
immortal = true

[node name="Surface_Right" parent="StaticGeometry" instance=ExtResource( 2 )]
material = SubResource( 4 )
position = Vector2( 1928, 540 )
size = Vector2( 16, 1080 )
immortal = true

[node name="Player" parent="." instance=ExtResource( 1 )]
position = Vector2( -111, 189 )
max_jump_height = 100.0
half_jump_dist = 300.0

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 5 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = -4

[node name="Background" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 8 )
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 1 )

[connection signal="body_entered" from="BeatTarget/Area2D" to="BeatTarget" method="_on_body_entered"]
[connection signal="body_exited" from="BeatTarget/Area2D" to="BeatTarget" method="_on_body_exited"]
